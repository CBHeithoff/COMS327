Assignment 1.07 involves creating a parser to read NPC templates in the monster_desc.txt file and store valid monster descriptions to be printed out to the terminal. In rlg327.cpp, I commented out the section of code that starts the game and added my functions at the end of the file so that upon execution, only the monster descriptions are printed. The codebase for hw 1.07 is built on the post-hw 1.06 code drop from the professor. I did not modify the Makefile other than compiling npc_type.o for the new code, so the execution is: "make" THEN "./rlg327

Created a npc template class called npc_type in file npc_type.h. The npc_type class stores the nine fields an npc can have, including NAME, DESC, COLOR, SPEED, ABIL, HP, DAM, SYMB, and RRTY. Defined a typedef enum fields with the fields given above in proper order to improve readability and minimize unwanted magic numbers in code and defined a dice struct storing the base, dice number, and dice sides parameters for dice-based fields like speed, hitpoints, and attack damage.

In npc_type.cpp, created read_monster_desc(), which reads the monster description file and returns an array of npc_type classes, and print_monster_desc(), which takes an array of npc_type classes and prints out their fields to the terminal. Developed read_monster_desc(), which opens the file, then for each monster outlined in the file, it begins parsing each field with a function called fill_field(). fill_field() takes the name of the current field name, NPC class, ifstream, and istringstream as input and, depending on the field name, will use the input streams and file format rules to fill in the monster details to the given NPC class.

For monster description and field validation, a boolean array of length nine was created and initialized to all false; each field gets a cell according to the typedef enum fields mentioned above. With each call to fill_field(), the respective cell is set to true, this ensures the correct amount of fields and no duplicates. Fields with length restrictions (DESC, SYMB) and ranges (RRTY) are ensured with conditional statements. The numbers (RRTY) and dice-based (SPEED, HP, DAM) fields use stoi() to ensure validity since incorrect format will throw an exception, which is then caught. Sets of acceptable colors and abilities were created and checked with functions is_valid_color() and is_valid_ability(), respectively, so the created npc_type classes only store valid color and ability options. If a monster template has incorrect input, the monster description is discarded and the next is found and started.
