
dims.h,146
# define DIMS_H2,15
typedef enum dim 7,190
  dim_x,8,209
  dim_y,9,218
  num_dims10,227
} dim_t;11,238
typedef int8_t pair_t[pair_t13,248

dungeon.c,1861
#define DUMP_HARDNESS_IMAGES 19,323
typedef struct corridor_path 21,355
  heap_node_t *hn;hn22,386
  uint8_t pos[pos23,405
  uint8_t from[from24,423
  int32_t cost;25,442
} corridor_path_t;26,458
static uint32_t adjacent_to_room(46,875
static uint32_t is_open_space(54,1136
static int32_t corridor_path_cmp(59,1235
static void dijkstra_corridor(63,1385
static void dijkstra_corridor_inv(162,5122
#define hardnesspair_inv(215,6444
static int connect_two_rooms(265,9115
static int create_cycle(284,9767
static int connect_rooms(326,11332
int gaussian[gaussian339,11525
typedef struct queue_node 347,11681
  int x,348,11709
  int x, y;348,11709
  struct queue_node *next;next349,11721
} queue_node_t;350,11748
static int smooth_hardness(352,11765
static int empty_dungeon(511,16036
static int place_rooms(530,16412
static void place_stairs(567,17599
static int make_rooms(589,18234
int gen_dungeon(612,18797
void render_dungeon(625,18959
void delete_dungeon(665,19903
void init_dungeon(688,20479
int write_dungeon_map(693,20536
int write_rooms(706,20765
uint16_t count_up_stairs(728,21237
uint16_t count_down_stairs(744,21488
int write_stairs(760,21743
uint32_t calculate_dungeon_size(792,22498
int write_dungeon(803,22969
int read_dungeon_map(869,24524
int read_stairs(892,25122
int read_rooms(915,25599
int read_dungeon(973,27525
int read_pgm(1054,29402
void render_hardness_map(1139,31805
void render_movement_cost_map(1162,32332
void render_distance_map(1184,32837
void render_tunnel_distance_map(1223,33871
int gen_characters(1262,34908
void render_dungeon_mon(1360,37898
static int in_room(1407,39124
static void bresendam_next_step(1422,39532
static void smart_next_step(1451,40340
static void smart_next_step_tunnel(1570,44943
static int32_t character_cmp(1645,47068
int dungeon_turns(1677,47914

dungeon.h,1921
# define DUNGEON_H2,18
#define DUNGEON_X 7,77
#define DUNGEON_Y 8,111
#define MIN_ROOMS 9,145
#define MAX_ROOMS 10,178
#define ROOM_MIN_X 11,212
#define ROOM_MIN_Y 12,245
#define ROOM_MAX_X 13,278
#define ROOM_MAX_Y 14,312
#define SAVE_DIR 15,346
#define DUNGEON_SAVE_FILE 16,387
#define DUNGEON_SAVE_SEMANTIC 17,428
#define DUNGEON_SAVE_VERSION 18,474
#define DEFAULT_MONSTERS 19,508
#define PC_SPEED 20,542
#define MIN_MON_SPEED 21,576
#define MAX_MON_SPEED 22,609
#define ATTRIBUTE_SMART 23,643
#define ATTRIBUTE_TELEPATHIC 24,685
#define ATTRIBUTE_TUNNEL 25,727
#define ATTRIBUTE_ERRATIC 26,769
#define mappair(28,812
#define mapxy(29,869
#define hardnesspair(30,904
#define hardnessxy(31,971
#define monster_is(32,1016
typedef enum __attribute__ ((__packed__)) terrain_type 34,1087
  ter_debug,35,1144
  ter_wall,36,1157
  ter_wall_immutable,37,1169
  ter_floor,38,1191
  ter_floor_room,39,1204
  ter_floor_hall,40,1222
  ter_stairs,41,1240
  ter_stairs_up,42,1254
  ter_stairs_down43,1271
} terrain_type_t;44,1289
typedef struct room 46,1308
  pair_t position;47,1330
  pair_t size;48,1349
} room_t;49,1364
typedef struct pc 51,1375
  pair_t position;52,1395
  int speed;53,1414
  int sequence_num;54,1427
  int next_turn;55,1447
  heap_node_t *hn;hn56,1464
} pc_t;57,1483
typedef struct monster 59,1492
  pair_t position;60,1517
  pair_t pc_position;61,1536
  int characteristics;62,1558
  char symbol;63,1581
  int speed;64,1596
  int sequence_num;65,1609
  int next_turn;66,1629
  heap_node_t *hn;hn67,1646
} monster_t;68,1665
typedef struct dungeon 70,1679
  uint32_t num_rooms;71,1704
  room_t *rooms;rooms72,1726
  terrain_type_t map[map73,1743
  uint8_t hardness[hardness82,2396
  uint8_t pc_distance[pc_distance83,2438
  uint8_t pc_tunnel[pc_tunnel84,2483
  pc_t pc;85,2526
  void* characters[characters86,2537
} dungeon_t;87,2579

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6734
char *print_int(print_int348,6833
int main(357,6951

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

path.c,302
static dungeon_t *dungeon;dungeon15,673
typedef struct path 17,701
  heap_node_t *hn;hn18,723
  uint8_t pos[pos19,742
} path_t;20,760
static int32_t dist_cmp(22,771
static int32_t tunnel_cmp(29,1125
void dijkstra(36,1473
#define tunnel_movement_cost(146,5965
void dijkstra_tunnel(149,6057

path.h,93
# define PATH_H2,15
# define HARDNESS_PER_TURN 4,32
typedef struct dungeon dungeon_t;6,63

rlg327.c,35
void usage(9,122
int main(19,332

utils.c,25
int makedirectory(9,124

utils.h,123
# define UTILS_H2,16
# define rand_under(6,147
# define rand_range(10,290
#define malloc(12,364
#define UNUSED(18,508
